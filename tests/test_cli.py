import subprocess
from pathlib import Path

from conda_vulnerability_scanner.scanner import ExitCode


def test_cli_scan(test_db_path, test_package_list_path, tmp_path):
    """
    This test runs the CLI in a subprocess and tests the scan command
    """
    json_report_file = tmp_path / "json-report.json"
    return_code = subprocess.call(["python", "-m", "conda_vulnerability_scanner.scanner", "scan",
                                   "--db-directory", test_db_path,
                                   "--package-list-file", test_package_list_path,
                                   "--json-report-file", json_report_file])

    assert return_code == ExitCode.CVE_FOUND.value and json_report_file.exists()


def test_cli_scan_with_severity_filter(test_db_path, test_package_list_path, tmp_path):
    """
    This test runs the CLI in a subprocess and tests the scan command with severity filter
    """
    json_report_file = tmp_path / "json-report.json"
    return_code = subprocess.call(["python", "-m", "conda_vulnerability_scanner.scanner", "scan",
                                   "--db-directory", test_db_path,
                                   "--package-list-file", test_package_list_path,
                                   "--json-report-file", json_report_file,
                                   "--severity-filter", "CRITICAL"], )

    assert return_code == ExitCode.SUCCESS.value and json_report_file.exists()


def test_cli_scan_with_cve_ignore_file(test_db_path, test_package_list_path, tmp_path):
    """
    This test runs the CLI in a subprocess and tests the scan command with a cve ignore file
    """
    json_report_file = tmp_path / "json-report.json"
    cve_ignore_file = tmp_path / "cve_ignore_file"
    with open(cve_ignore_file, "w") as f:
        f.writelines(["CVE-2022-29191\n", "CVE-2022-29192\n"])
    return_code = subprocess.call(["python", "-m", "conda_vulnerability_scanner.scanner", "scan",
                                   "--db-directory", test_db_path,
                                   "--package-list-file", test_package_list_path,
                                   "--json-report-file", json_report_file,
                                   "--cve-ignore-list-file", str(cve_ignore_file)])

    assert return_code == ExitCode.CVE_FOUND.value and json_report_file.exists()


def test_cli_fetch(tmp_path):
    """
    This test runs the CLI in a subprocess and tests the fetch command
    """
    return_code = subprocess.call(["python", "-m", "conda_vulnerability_scanner.scanner", "fetch",
                                   "--db-directory", tmp_path])

    assert return_code == 0

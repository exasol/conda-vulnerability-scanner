import io
import textwrap

from conda_vulnerability_scanner.scanner import parse_cve_ignore_list


def test_list_without_comments():
    input_str = textwrap.dedent(
        """
        CVE-1
        CVE-2
        CVE-3
        """)
    input_fileobj = io.StringIO(input_str)
    actual_ignored_cves = parse_cve_ignore_list(input_fileobj)
    assert actual_ignored_cves == ["CVE-1", "CVE-2", "CVE-3"]

def test_list_with_line_comments():
    input_str = textwrap.dedent(
        """
        # Test comment 1
        CVE-1
        CVE-2
        # Test comment 2
        CVE-3
        """)
    input_fileobj = io.StringIO(input_str)
    actual_ignored_cves = parse_cve_ignore_list(input_fileobj)
    assert actual_ignored_cves == ["CVE-1", "CVE-2", "CVE-3"]

def test_list_with_inline_comments():
    input_str = textwrap.dedent(
        """
        CVE-1 # Test comment 1
        CVE-2 # Test comment 2
        CVE-3
        """)
    input_fileobj = io.StringIO(input_str)
    actual_ignored_cves = parse_cve_ignore_list(input_fileobj)
    assert actual_ignored_cves == ["CVE-1", "CVE-2", "CVE-3"]

def test_list_carriage_return():
    input_str = textwrap.dedent(
        """
        CVE-1\n\r
        CVE-2
        CVE-3
        """)
    input_fileobj = io.StringIO(input_str)
    actual_ignored_cves = parse_cve_ignore_list(input_fileobj)
    assert actual_ignored_cves == ["CVE-1", "CVE-2", "CVE-3"]

def test_empty_list():
    input_str = ""
    input_fileobj = io.StringIO(input_str)
    actual_ignored_cves = parse_cve_ignore_list(input_fileobj)
    assert actual_ignored_cves == []

import tempfile
from pathlib import Path

import pytest

from conda_security_scanner.scanner import main


def test_fetch_db_db_directory_exists():
    with tempfile.TemporaryDirectory() as temp_dir:
        actual = None
        test_db_dir = Path(temp_dir)

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            nonlocal actual
            actual = db_dir_path

        main(["fetch", "--db-directory", str(test_db_dir)], scan, fetch_db)
        assert actual == test_db_dir


def test_fetch_db_db_directory_exists_not():
    with tempfile.TemporaryDirectory() as temp_dir:
        test_db_dir = Path(temp_dir) / "test"
        actual = None

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            nonlocal actual
            actual = db_dir_path

        main(["fetch", "--db-directory", str(test_db_dir)], scan, fetch_db)
        assert actual == test_db_dir


def test_fetch_db_unknown_parameter():
    with tempfile.TemporaryDirectory() as temp_dir:
        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["fetch", "--db-directory", temp_dir, "--ab"], scan, fetch_db)


def test_fetch_db_no_db_directory():
    with tempfile.TemporaryDirectory() as temp_dir:
        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["fetch"], scan, fetch_db)


def test_scan_success():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"
        temp_db_dir = Path(temp_dir)

        scan_parameter = NamedTuple("scan_parameter", "db_dir_path package_list_file json_report_file_path")
        actual_scan_parameter = None

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            nonlocal actual_scan_parameter
            actual_scan_parameter = scan_parameter(db_dir_path, package_list_file, json_report_file_path)

        def fetch_db(db_dir_path: Path):
            assert False

        main(["scan",
              "--db-directory", str(temp_db_dir),
              "--json-report-file", str(temp_json_report_file_path),
              "--package-list-file", str(temp_package_list_file)],
             scan, fetch_db)

        assert actual_db_dir_path == temp_db_dir and \
               actual_package_list_file == temp_package_list_file and \
               actual_json_report_file_path == temp_json_report_file_path


def test_scan_db_directory_exists_not():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"
        temp_db_dir = Path(temp_dir) / "__not_existing__"

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--db-directory", str(temp_db_dir),
                  "--json-report-file", str(temp_json_report_file_path),
                  "--package-list-file", str(temp_package_list_file)],
                 scan, fetch_db)


def test_scan_package_list_file_exists_not():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file___not_existing___.json"
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"
        temp_db_dir = Path(temp_dir)

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--db-directory", str(temp_db_dir),
                  "--json-report-file", str(temp_json_report_file_path),
                  "--package-list-file", str(temp_package_list_file)],
                 scan, fetch_db)


def test_scan_unknown_parameter():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"
        temp_db_dir = Path(temp_dir)

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--db-directory", str(temp_db_dir),
                  "--json-report-file", str(temp_json_report_file_path),
                  "--package-list-file", str(temp_package_list_file),
                  "--ab"],
                 scan, fetch_db)


def test_scan_no_db_directory():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--json-report-file", str(temp_json_report_file_path),
                  "--package-list-file", str(temp_package_list_file)],
                 scan, fetch_db)


def test_scan_no_package_list_file():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_json_report_file_path = Path(temp_dir) / "json_report_file_path.json"
        temp_db_dir = Path(temp_dir)

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--db-directory", str(temp_db_dir),
                  "--json-report-file", str(temp_json_report_file_path),
                  ],
                 scan, fetch_db)


def test_scan_no_json_report_file():
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_package_list_file = Path(temp_dir) / "package_list_file.json"
        temp_package_list_file.touch()
        temp_db_dir = Path(temp_dir)

        def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path):
            assert False

        def fetch_db(db_dir_path: Path):
            assert False

        with pytest.raises(SystemExit):
            main(["scan",
                  "--db-directory", str(temp_db_dir),
                  "--package-list-file", str(temp_package_list_file)
                  ],
                 scan, fetch_db)

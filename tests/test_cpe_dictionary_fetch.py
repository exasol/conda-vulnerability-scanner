import contextlib
import os
import sqlite3
from pathlib import Path
from typing import Iterator

from conda_vulnerability_scanner.scanner import fetch_cpe_dictionary, get_go_cpe_dictionary_binary


def test_cpe_dictionary_fetch_with_absolute_path(tmp_path):
    """
    This test runs the function fetch_cpe_dictionary
    with an absolute path for the output directory and
    checks if the sqlite3 database was successfully created and
    contains the table categorized_cpes with at least the columns
    vendor, product, part
    """
    with get_go_cpe_dictionary_binary() as go_cpe_dictionary:
        db_directory_path = tmp_path / Path("db_directory")
        db_directory_path.mkdir()
        cpe_dictionary_file = fetch_cpe_dictionary(go_cpe_dictionary, db_directory_path.absolute())
        assert cpe_dictionary_file.is_file() and cpe_dictionary_file.name == "cpe.sqlite3"
        with contextlib.closing(sqlite3.connect(cpe_dictionary_file)) as conn:
            rows = conn.execute("select vendor, product, part from categorized_cpes limit 1;").fetchall()
            assert len(rows) == 1 and len(rows[0]) == 3


@contextlib.contextmanager
def change_cwd(directory: Path) -> Iterator[Path]:
    old_cwd = os.getcwd()
    os.chdir(directory)
    yield directory
    os.chdir(old_cwd)


def test_cpe_dictionary_fetch_with_relative_path(tmp_path):
    """
    This test runs the function fetch_cpe_dictionary
    with a relative path for the output directory and
    checks if the sqlite3 database was successfully created and
    contains the table categorized_cpes with at least the columns
    vendor, product, part
    """
    with get_go_cpe_dictionary_binary() as go_cpe_dictionary:
        with change_cwd(tmp_path):
            relative_db_directory_path = Path("db_directory")
            relative_db_directory_path.mkdir()
            cpe_dictionary_file = fetch_cpe_dictionary(go_cpe_dictionary, relative_db_directory_path)
            assert cpe_dictionary_file.is_file() and cpe_dictionary_file.name == "cpe.sqlite3"
            with contextlib.closing(sqlite3.connect(cpe_dictionary_file)) as conn:
                rows = conn.execute("select vendor, product, part from categorized_cpes limit 1;").fetchall()
                assert len(rows) == 1 and len(rows[0]) == 3

import dataclasses
from pathlib import Path
from typing import Optional

import pytest

from conda_vulnerability_scanner.scanner import main_debug, ScanResult, Severity, ExitCode


@dataclasses.dataclass
class ScanParameter:
    db_dir_path: Path
    package_list_file: Path
    json_report_file_path: Path
    severity_filter: Severity
    cve_ignore_list_file: Path


def test_fetch_db_with_existing_db_directory(tmp_path):
    """
    This test calls main_debug with a existing db directory and expects to call the fetch_Db function
    """
    actual = None
    test_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        nonlocal actual
        actual = db_dir_path

    main_debug(["fetch", "--db-directory", str(test_db_dir)], scan, fetch_db)
    assert actual == test_db_dir


def test_fetch_db_with_non_existing_db_directory(tmp_path):
    """
    This test calls main_debug with the fetch command and a non-existing db directory and
    expects to call the fetch_Db function
    """
    test_db_dir = tmp_path / "test"
    actual = None

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        nonlocal actual
        actual = db_dir_path

    main_debug(["fetch", "--db-directory", str(test_db_dir)], scan, fetch_db)
    assert actual == test_db_dir


def test_fetch_db_unknown_argument(tmp_path):
    """
    Call the main_debug with the fetch command with a unknown argument and
    expect it to fail and not calling scan or fetch_db
    """

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["fetch", "--db-directory", str(tmp_path), "--ab"], scan, fetch_db)


def test_fetch_db_no_db_directory_parameter(tmp_path):
    """
    Call main_debug with the fetch command without the --db-directory and
    expect it to fail and not calling scan or fetch_db
    """

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["fetch"], scan, fetch_db)


def test_scan_cve_found(tmp_path):
    """
    Call main_debug with the scan command and mock return ScanResults.CVE_FOUND
    expect ExitCode.CVE_FOUND
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    actual_scan_parameter: Optional[ScanParameter] = None

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        nonlocal actual_scan_parameter
        actual_scan_parameter = ScanParameter(db_dir_path, package_list_file, json_report_file_path,
                                              severity_filter, cve_ignore_list_file)
        return ScanResult.CVE_FOUND

    def fetch_db(db_dir_path: Path):
        assert False

    result = main_debug(["scan",
                         "--db-directory", str(temp_db_dir),
                         "--json-report-file", str(temp_json_report_file_path),
                         "--package-list-file", str(temp_package_list_file)],
                        scan, fetch_db)

    assert result == ExitCode.CVE_FOUND.value and \
           actual_scan_parameter.db_dir_path == temp_db_dir and \
           actual_scan_parameter.package_list_file == temp_package_list_file and \
           actual_scan_parameter.json_report_file_path == temp_json_report_file_path and \
           actual_scan_parameter.cve_ignore_list_file is None and \
           actual_scan_parameter.severity_filter == Severity.NONE


def test_scan_success_without_optional_parameter(tmp_path):
    """
    Call main_debug with the scan command without optional parameter and
    expect success and a call of the scan function
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    actual_scan_parameter: Optional[ScanParameter] = None

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        nonlocal actual_scan_parameter
        actual_scan_parameter = ScanParameter(db_dir_path, package_list_file, json_report_file_path,
                                              severity_filter, cve_ignore_list_file)
        return ScanResult.NO_CVE_FOUND

    def fetch_db(db_dir_path: Path):
        assert False

    result = main_debug(["scan",
                         "--db-directory", str(temp_db_dir),
                         "--json-report-file", str(temp_json_report_file_path),
                         "--package-list-file", str(temp_package_list_file)],
                        scan, fetch_db)

    assert result == ExitCode.SUCCESS.value and \
           actual_scan_parameter.db_dir_path == temp_db_dir and \
           actual_scan_parameter.package_list_file == temp_package_list_file and \
           actual_scan_parameter.json_report_file_path == temp_json_report_file_path and \
           actual_scan_parameter.cve_ignore_list_file is None and \
           actual_scan_parameter.severity_filter == Severity.NONE


def test_scan_success_with_cve_ignore_list(tmp_path):
    """
    Call main_debug with the scan command with cve ignore list and
    expect success and a call of the scan function
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path
    tmp_cve_ignore_list_file = tmp_path / "cve_ignore_list"
    tmp_cve_ignore_list_file.touch()

    actual_scan_parameter: Optional[ScanParameter] = None

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        nonlocal actual_scan_parameter
        actual_scan_parameter = ScanParameter(db_dir_path, package_list_file, json_report_file_path,
                                              severity_filter, cve_ignore_list_file)
        return ScanResult.NO_CVE_FOUND

    def fetch_db(db_dir_path: Path):
        assert False

    result = main_debug(["scan",
                         "--db-directory", str(temp_db_dir),
                         "--json-report-file", str(temp_json_report_file_path),
                         "--package-list-file", str(temp_package_list_file),
                         "--cve-ignore-list-file", str(tmp_cve_ignore_list_file)],
                        scan, fetch_db)

    assert result == ExitCode.SUCCESS.value and \
           actual_scan_parameter.db_dir_path == temp_db_dir and \
           actual_scan_parameter.package_list_file == temp_package_list_file and \
           actual_scan_parameter.json_report_file_path == temp_json_report_file_path and \
           actual_scan_parameter.cve_ignore_list_file == tmp_cve_ignore_list_file and \
           actual_scan_parameter.severity_filter == Severity.NONE


def test_scan_success_with_valid_severity_filter(tmp_path):
    """
    Call main_debug with the scan command with valid severity and
    expect success and a call of the scan function
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    actual_scan_parameter: Optional[ScanParameter] = None

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        nonlocal actual_scan_parameter
        actual_scan_parameter = ScanParameter(db_dir_path, package_list_file, json_report_file_path,
                                              severity_filter, cve_ignore_list_file)
        return ScanResult.NO_CVE_FOUND

    def fetch_db(db_dir_path: Path):
        assert False

    input_severity = Severity.HIGH
    result = main_debug(["scan",
                         "--db-directory", str(temp_db_dir),
                         "--json-report-file", str(temp_json_report_file_path),
                         "--package-list-file", str(temp_package_list_file),
                         "--severity-filter", input_severity.name],
                        scan, fetch_db)

    assert result == ExitCode.SUCCESS.value and \
           actual_scan_parameter.db_dir_path == temp_db_dir and \
           actual_scan_parameter.package_list_file == temp_package_list_file and \
           actual_scan_parameter.json_report_file_path == temp_json_report_file_path and \
           actual_scan_parameter.cve_ignore_list_file == None and \
           actual_scan_parameter.severity_filter == input_severity


def test_scan_with_invvalid_severity_filter(tmp_path):
    """
    Call main_debug with the scan command with invalid severity filter and
    expect cli parser error
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["scan",
                    "--db-directory", str(temp_db_dir),
                    "--json-report-file", str(temp_json_report_file_path),
                    "--package-list-file", str(temp_package_list_file),
                    "--severity-filter", "__NOT_EXISTING_SEVERITY__"],
                   scan, fetch_db)


def test_scan_non_existing_db_directory(tmp_path):
    """
    Call main_debug with the scan command and non-existing db directory
    expect error and not calling the scan function
    """

    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path / "__not_existing__"

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    return_code = main_debug(["scan",
                              "--db-directory", str(temp_db_dir),
                              "--json-report-file", str(temp_json_report_file_path),
                              "--package-list-file", str(temp_package_list_file)],
                             scan, fetch_db)
    assert return_code == 1


def test_scan_package_list_file_exists_not(tmp_path):
    temp_package_list_file = tmp_path / "package_list_file___not_existing___.json"
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    return_code = main_debug(["scan",
                              "--db-directory", str(temp_db_dir),
                              "--json-report-file", str(temp_json_report_file_path),
                              "--package-list-file", str(temp_package_list_file)],
                             scan, fetch_db)
    assert return_code == 1


def test_scan_unknown_parameter(tmp_path):
    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["scan",
                    "--db-directory", str(temp_db_dir),
                    "--json-report-file", str(temp_json_report_file_path),
                    "--package-list-file", str(temp_package_list_file),
                    "--ab"],
                   scan, fetch_db)


def test_scan_no_db_directory_argument(tmp_path):
    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["scan",
                    "--json-report-file", str(temp_json_report_file_path),
                    "--package-list-file", str(temp_package_list_file)],
                   scan, fetch_db)


def test_scan_no_package_list_file_argument(tmp_path):
    temp_json_report_file_path = tmp_path / "json_report_file_path.json"
    temp_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["scan",
                    "--db-directory", str(temp_db_dir),
                    "--json-report-file", str(temp_json_report_file_path),
                    ],
                   scan, fetch_db)


def test_scan_no_json_report_file_argument(tmp_path):
    temp_package_list_file = tmp_path / "package_list_file.json"
    temp_package_list_file.touch()
    temp_db_dir = tmp_path

    def scan(db_dir_path: Path, json_report_file_path: Path, package_list_file: Path,
             severity_filter: Severity, cve_ignore_list_file: Optional[Path]) -> ScanResult:
        assert False

    def fetch_db(db_dir_path: Path):
        assert False

    with pytest.raises(SystemExit):
        main_debug(["scan",
                    "--db-directory", str(temp_db_dir),
                    "--package-list-file", str(temp_package_list_file)
                    ],
                   scan, fetch_db)

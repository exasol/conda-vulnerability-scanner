import re

import pytest

from conda_security_scanner.scanner import lookup_cves_for_cpes, CVE, get_cpe2cve_binary


def test_found_cves(test_data_feed_file_path):
    """
    This test runs lookup_cves_for_cpes with a known vulnerable package
    and expects to find cves in the test_data_feed_file
    """
    cpes = {("google", "tensorflow", "2.8.0")}
    with get_cpe2cve_binary() as cpe2cve:
        nvd_datafeed_files = [test_data_feed_file_path]
        cves = sorted(lookup_cves_for_cpes(cpe2cve, nvd_datafeed_files, cpes))
        expected = sorted([CVE(cve='CVE-2022-29191', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29192', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29193', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29194', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29195', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29196', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29197', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29198', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29199', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29200', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29201', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20,CWE-476',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29202', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20,CWE-400',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29203', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-190',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29204', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29205', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-476,CWE-908',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29206', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20,CWE-476',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29207', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20,CWE-475',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29208', cvss='7.1', cvss2='3.6', cvss3='7.1', cwe='CWE-787',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29209', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-843',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29210', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-120,CWE-122',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29211', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29212', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29213', cvss='5.5', cvss2='2.1', cvss3='5.5', cwe='CWE-20',
                               cpe='cpe:/a:google:tensorflow:2.8.0'),
                           CVE(cve='CVE-2022-29216', cvss='7.8', cvss2='4.6', cvss3='7.8', cwe='CWE-94',
                               cpe='cpe:/a:google:tensorflow:2.8.0')]
                          )
        assert cves == expected


def test_no_cves_found(test_data_feed_file_path):
    """
    This test runs lookup_cves_for_cpes with a not existing package
    and expects to find no cves in the test_data_feed_file
    """
    cpes = {("not_existing_vendor", "not_existing_vendor", "4.8.0")}
    with get_cpe2cve_binary() as cpe2cve:
        nvd_datafeed_files = [test_data_feed_file_path]
        cves = sorted(lookup_cves_for_cpes(cpe2cve, nvd_datafeed_files, cpes))
        assert cves == []


def test_empty_datafeed_file_list(test_data_feed_file_path):
    """
    This test checks the exception of lookup_cves_for_cpes when called with a empty data feed file list
    """
    cpes = {("google", "tensorflow", "2.8.0")}
    with get_cpe2cve_binary() as cpe2cve:
        nvd_datafeed_files = []
        with pytest.raises(ValueError, match="No NVD datafeed files found."):
            cves = sorted(lookup_cves_for_cpes(cpe2cve, nvd_datafeed_files, cpes))


def test_same_datafeed_files_exist_not(test_data_feed_file_path):
    """
    This test checks the exception of lookup_cves_for_cpes when called with not existing data feed files
    """
    cpes = {("google", "tensorflow", "2.8.0")}
    with get_cpe2cve_binary() as cpe2cve:
        not_existing_datafeed_file = test_data_feed_file_path.parent / "not_existing_datafeed_file"
        nvd_datafeed_files = [test_data_feed_file_path, not_existing_datafeed_file]
        with pytest.raises(ValueError,
                           match=re.escape(
                               f"The following NVD datafeed files ['{not_existing_datafeed_file}'] don't exists.")):
            cves = sorted(lookup_cves_for_cpes(cpe2cve, nvd_datafeed_files, cpes))
